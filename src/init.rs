use rune_core::env::{ObjectMap, Symbol, SymbolMap, BUILTIN_SYMBOLS};
use rune_core::gc::{Block, Context};
use std::sync::{Mutex, OnceLock};

// This file includes all symbol definitions. Generated by build.rs
include!(concat!(env!("OUT_DIR"), "/sym.rs"));

/// TODO: Use `LazyLock`: <https://github.com/CeleritasCelery/rune/issues/34>
static INTERNED_SYMBOLS: OnceLock<Mutex<ObjectMap>> = OnceLock::new();

pub fn interned_symbols() -> &'static Mutex<ObjectMap> {
    INTERNED_SYMBOLS.get_or_init(|| {
        Mutex::new({
            let size: usize = 286;
            let mut map = SymbolMap::with_capacity(size);
            for sym in BUILTIN_SYMBOLS.iter().chain(defun::DEFUN_SYMBOLS.iter()) {
                map.pre_init(Symbol::new(sym));
            }
            ObjectMap { map, block: Block::new_global() }
        })
    })
}

/// Intern a new symbol based on `name`
pub fn intern<'ob>(name: &str, cx: &'ob Context) -> Symbol<'ob> {
    interned_symbols().lock().unwrap().intern(name, cx)
}
